season = seasonsChoices$season[s]
seasonoption = seasonsChoices$option[s]
# open seasons menu
seasonsButton <- 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select'
seasonsElem <- web$findElement(using = 'css', value = seasonsButton)
openSeasons <- seasonsElem$clickElement() # click on button
loopTour = function(tour,touroption,season){
# select tour
tourOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select > option:nth-child(',touroption,')')
tourSelectElem <- web$findElement(using = 'css', value = tourOptionButton)
chooseTour <- tourSelectElem$clickElement() # click on button
Sys.sleep(10)
page = read_html(web$getPageSource()[[1]])
table = page %>%
html_nodes("table") %>%
html_table(fill = TRUE, trim = TRUE) %>%
.[[2]] %>%
`colnames<-`(tolower(gsub(".","_",make.names(colnames(.)),fixed=TRUE))) %>%
mutate(season = season, tour = tour)
return(table)
}
outWorldRank = list()
for (s in 1:nrow(seasonsChoices)){
web$open()
web$navigate(url=urlA)
season = seasonsChoices$season[s]
seasonoption = seasonsChoices$option[s]
# open seasons menu
seasonsButton <- 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select'
seasonsElem <- web$findElement(using = 'css', value = seasonsButton)
openSeasons <- seasonsElem$clickElement() # click on button
Sys.sleep(10)
# select season
seasonsOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select > option:nth-child(',seasonoption,')')
seasonsSelectElem <- web$findElement(using = 'css', value = seasonsOptionButton)
chooseSeasons <- seasonsSelectElem$clickElement() # click on button
Sys.sleep(10)
# open tours menu
toursButton = 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select'
toursElem <- web$findElement(using = 'css', value = toursButton)
openTours <- toursElem$clickElement() # click on button
Sys.sleep(10)
page2 = read_html(web$getPageSource()[[1]])
# get tours choices
toursChoices = page2 %>%
html_nodes(css='div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select') %>%
xml_children() %>%
xml_text() %>%
tibble(option = c(1:length(.)), tour = .)
for (t in 1:nrow(toursChoices)){
print(paste("Scraping Menu A:",s,"of",nrow(seasonsChoices),"and Menu B:",t,"of",nrow(toursChoices)))
tour = toursChoices$tour[t]
touroption = toursChoices$option[t]
table = tryCatch(loopTour(tour,touroption,season),error = function(err){tibble(tour=tour,season=season,status='failed')})
outWorldRank[[paste(tour,season)]] = table
web$close()
}
web$open()
web$navigate(url=urlA)
season = seasonsChoices$season[s]
seasonoption = seasonsChoices$option[s]
# open seasons menu
seasonsButton <- 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select'
seasonsElem <- web$findElement(using = 'css', value = seasonsButton)
openSeasons <- seasonsElem$clickElement() # click on button
seasonsOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select > option:nth-child(',seasonoption,')')
seasonsSelectElem <- web$findElement(using = 'css', value = seasonsOptionButton)
seasonoption
str(seasonoption)
seasonsOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select > option:nth-child(',as.character(seasonoption),')')
seasonsSelectElem <- web$findElement(using = 'css', value = seasonsOptionButton)
chooseSeasons <- seasonsSelectElem$clickElement() # click on button
web$open()
web$navigate(url=urlA)
web$open()
web$navigate(url=urlA)
page = read_html(web$getPageSource()[[1]])
seasonsChoices = page %>%
html_nodes(css='div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select') %>%
xml_children() %>%
xml_text() %>%
tibble(option = c(1:length(.)), season = .) #%>% filter(season==2020)
loopTour = function(tour,touroption,season){
# select tour
tourOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select > option:nth-child(',touroption,')')
tourSelectElem <- web$findElement(using = 'css', value = tourOptionButton)
chooseTour <- tourSelectElem$clickElement() # click on button
Sys.sleep(10)
page = read_html(web$getPageSource()[[1]])
table = page %>%
html_nodes("table") %>%
html_table(fill = TRUE, trim = TRUE) %>%
.[[2]] %>%
`colnames<-`(tolower(gsub(".","_",make.names(colnames(.)),fixed=TRUE))) %>%
mutate(season = season, tour = tour)
return(table)
}
outWorldRank = list()
for (s in 1:nrow(seasonsChoices)){
web$open()
web$navigate(url=urlA)
season = seasonsChoices$season[s]
seasonoption = seasonsChoices$option[s]
# open seasons menu
seasonsButton <- 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select'
seasonsElem <- web$findElement(using = 'css', value = seasonsButton)
openSeasons <- seasonsElem$clickElement() # click on button
Sys.sleep(10)
# select season
seasonsOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select > option:nth-child(',as.character(seasonoption),')')
seasonsSelectElem <- web$findElement(using = 'css', value = seasonsOptionButton)
chooseSeasons <- seasonsSelectElem$clickElement() # click on button
Sys.sleep(10)
# open tours menu
toursButton = 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select'
toursElem <- web$findElement(using = 'css', value = toursButton)
openTours <- toursElem$clickElement() # click on button
Sys.sleep(10)
page2 = read_html(web$getPageSource()[[1]])
# get tours choices
toursChoices = page2 %>%
html_nodes(css='div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select') %>%
xml_children() %>%
xml_text() %>%
tibble(option = c(1:length(.)), tour = .)
for (t in 1:nrow(toursChoices)){
print(paste("Scraping Menu A:",s,"of",nrow(seasonsChoices),"and Menu B:",t,"of",nrow(toursChoices)))
tour = toursChoices$tour[t]
touroption = toursChoices$option[t]
table = tryCatch(loopTour(tour,touroption,season),error = function(err){tibble(tour=tour,season=season,status='failed')})
outWorldRank[[paste(tour,season)]] = table
web$close()
}
web = RSelenium::remoteDriver(port=4445L)
web$open()
web$navigate(url=urlA)
page = read_html(web$getPageSource()[[1]])
seasonsChoices = page %>%
html_nodes(css='div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select') %>%
xml_children() %>%
xml_text() %>%
tibble(option = c(1:length(.)), season = .) #%>% filter(season==2020)
s
web$open()
web$navigate(url=urlA)
season = seasonsChoices$season[s]
seasonoption = seasonsChoices$option[s]
# open seasons menu
seasonsButton <- 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select'
seasonsElem <- web$findElement(using = 'css', value = seasonsButton)
openSeasons <- seasonsElem$clickElement() # click on button
Sys.sleep(10)
# select season
seasonsOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select > option:nth-child(',as.character(seasonoption),')')
seasonsSelectElem <- web$findElement(using = 'css', value = seasonsOptionButton)
chooseSeasons <- seasonsSelectElem$clickElement() # click on button
seasonoption
seasonsOptionButton
seasonsChoices = page %>%
html_nodes(css='div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select') %>%
xml_children() %>%
xml_text() %>%
tibble(option = c(1:length(.)), season = .) #%>% filter(season==2020)
outWorldRank = list()
for (s in 1:nrow(seasonsChoices)){
season = seasonsChoices$season[s]
seasonoption = seasonsChoices$option[s]
# open seasons menu
seasonsButton <- 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select'
seasonsElem <- web$findElement(using = 'css', value = seasonsButton)
openSeasons <- seasonsElem$clickElement() # click on button
Sys.sleep(10)
# select season
seasonsOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select > option:nth-child(',seasonoption,')')
seasonsSelectElem <- web$findElement(using = 'css', value = seasonsOptionButton)
chooseSeasons <- seasonsSelectElem$clickElement() # click on button
Sys.sleep(10)
# open tours menu
toursButton = 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select'
toursElem <- web$findElement(using = 'css', value = toursButton)
openTours <- toursElem$clickElement() # click on button
Sys.sleep(10)
page2 = read_html(web$getPageSource()[[1]])
# get tours choices
toursChoices = page2 %>%
html_nodes(css='div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select') %>%
xml_children() %>%
xml_text() %>%
tibble(option = c(1:length(.)), tour = .)
for (t in 1:nrow(toursChoices)){
print(paste("Scraping Menu A:",s,"of",nrow(seasonsChoices),"and Menu B:",t,"of",nrow(toursChoices)))
tour = toursChoices$tour[t]
touroption = toursChoices$option[t]
# select tour
tourOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select > option:nth-child(',touroption,')')
tourSelectElem <- web$findElement(using = 'css', value = tourOptionButton)
chooseTour <- tourSelectElem$clickElement() # click on button
Sys.sleep(10)
page = read_html(web$getPageSource()[[1]])
table = page %>%
html_nodes("table") %>%
html_table(fill = TRUE, trim = TRUE) %>%
.[[2]] %>%
`colnames<-`(tolower(gsub(".","_",make.names(colnames(.)),fixed=TRUE))) %>%
mutate(season = season, tour = tour)
outWorldRank[[paste(tour,season)]] = table
}
charDF = function(df){
df %>% mutate_all(as.character)
}
web = RSelenium::remoteDriver(port=4445L)
web$open()
web$navigate(url=urlA)
page = read_html(web$getPageSource()[[1]])
seasonsChoices = page %>%
html_nodes(css='div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select') %>%
xml_children() %>%
xml_text() %>%
tibble(option = c(1:length(.)), season = .) #%>% filter(season==2020)
outWorldRank = list()
for (s in 1:nrow(seasonsChoices)){
web$open()
web$navigate(url=urlA)
season = seasonsChoices$season[s]
seasonoption = seasonsChoices$option[s]
# open seasons menu
seasonsButton <- 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select'
seasonsElem <- web$findElement(using = 'css', value = seasonsButton)
openSeasons <- seasonsElem$clickElement() # click on button
Sys.sleep(10)
# select season
seasonsOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select > option:nth-child(',seasonoption,')')
seasonsSelectElem <- web$findElement(using = 'css', value = seasonsOptionButton)
chooseSeasons <- seasonsSelectElem$clickElement() # click on button
Sys.sleep(10)
# open tours menu
toursButton = 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select'
toursElem <- web$findElement(using = 'css', value = toursButton)
openTours <- toursElem$clickElement() # click on button
Sys.sleep(10)
page2 = read_html(web$getPageSource()[[1]])
# get tours choices
toursChoices = page2 %>%
html_nodes(css='div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select') %>%
xml_children() %>%
xml_text() %>%
tibble(option = c(1:length(.)), tour = .)
for (t in 1:nrow(toursChoices)){
print(paste("Scraping Menu A:",s,"of",nrow(seasonsChoices),"and Menu B:",t,"of",nrow(toursChoices)))
tour = toursChoices$tour[t]
touroption = toursChoices$option[t]
# select tour
tourOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div:nth-child(2) > div > div > select > option:nth-child(',touroption,')')
tourSelectElem <- web$findElement(using = 'css', value = tourOptionButton)
chooseTour <- tourSelectElem$clickElement() # click on button
Sys.sleep(10)
page = read_html(web$getPageSource()[[1]])
table = page %>%
html_nodes("table") %>%
html_table(fill = TRUE, trim = TRUE) %>%
.[[2]] %>%
`colnames<-`(tolower(gsub(".","_",make.names(colnames(.)),fixed=TRUE))) %>%
mutate(season = season, tour = tour)
web$close()
outWorldRank[[paste(tour,season)]] = table
}
charDF = function(df){
df %>% mutate_all(as.character)
}
web$open()
web$navigate(url=urlA)
page = read_html(web$getPageSource()[[1]])
seasonsChoices = page %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "hasCustomSelect", " " ))]')
seasonsChoices
seasonsChoices = page %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "hasCustomSelect", " " ))]') %>% html_children
seasonsChoices
seasonsChoices = page %>%
html_nodes(css='div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select') %>%
xml_children() %>%
xml_text() %>%
tibble(option = c(1:length(.)), season = .) #%>% filter(season==2020)
seasonsChoices
web$open()
web$navigate(url=urlA)
season = seasonsChoices$season[s]
seasonoption = seasonsChoices$option[s]
# open seasons menu
seasonsButton <- 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select'
seasonsElem <- web$findElement(using = 'css', value = seasonsButton)
openSeasons <- seasonsElem$clickElement() # click on button
Sys.sleep(10)
# select season
seasonsOptionButton <- paste0('div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select > option:nth-child(',seasonoption,')')
seasonsSelectElem <- web$findElement(using = 'css', value = seasonsOptionButton)
chooseSeasons <- seasonsSelectElem$clickElement() # click on button
seasonsElem <- web$findElement(using = 'xpath', value = '/html/body/div[15]/div/div[7]/div[6]/div[2]/section/div[2]/section/div[2]/div[1]/div[1]/div/select')
openSeasons <- seasonsElem$clickElement() # click on button
web$open()
web$navigate(url=urlA)
season = seasonsChoices$season[s]
seasonoption = seasonsChoices$option[s]
# open seasons menu
seasonsButton <- 'div.main-content-off-the-tee-details > section > div.statistics-details-select-group > div.row-sm.justify-sm > div.statistics-details-select-wrap.season > div > select'
#seasonsElem <- web$findElement(using = 'css', value = seasonsButton)
seasonsElem <- web$findElement(using = 'xpath', value = '/html/body/div[15]/div/div[7]/div[6]/div[2]/section/div[2]/section/div[2]/div[1]/div[1]/div/select')
openSeasons <- seasonsElem$clickElement() # click on button
setwd("/Users/quinnx/Documents/GitHub/crimeR")
library(tidyverse)
library(lubridate)
library(jsonlite)
library(magrittr)
library(httr)
library(maps)
library(ggmap)
library(geojsonio)
library(sf)
library(maptools)
library(rgdal)
library(tigris)
library(ggthemes)
timeTibble = tibble(timename = c('Last 30 Days',c(2008:2020)),
timenum=c(8,32,33,34,35,11,10,9,27,26,38,0,1,2))
getCrimes = function(url){
json = fromJSON(url, flatten = TRUE)
restemp = json$features %>% as_tibble()
return(restemp)
}
timeTibble = tibble(timename = c('Last 30 Days',c(2008:2020)),
timenum=c(8,32,33,34,35,11,10,9,27,26,38,0,1,2))
getCrimes = function(url){
json = fromJSON(url, flatten = TRUE)
restemp = json$features %>% as_tibble()
return(restemp)
}
getCrimes_Fail = tibble(status='failed')
outList = list()
for (i in 1:nrow(timeTibble)){
ids = fromJSON(paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&outFields=*&outSR=4326&f=json&returnIdsOnly=TRUE")) %>% .$objectIds %>% as.character()
id_seq = tibble(
start=seq(from=1,to=ceiling(length(ids)/100)*100,by=100),
end=c(seq(from=100,to=length(ids),by=100),length(ids)))
res = tibble()
for (seq_i in 1:nrow(id_seq)){
print(paste("Scraping:",timeTibble$timename[i],"- at",seq_i,"of",nrow(id_seq)))
ids_string = str_c(ids[id_seq$start[seq_i]:id_seq$end[seq_i]], collapse = ",")
#Sys.sleep(3)
url = paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&objectIds=",ids_string,"&outFields=*&outSR=4326&f=json")
restemp = tryCatch(getCrimes(url),
error=function(err){
print(paste0("Failed at: ",timeTibble$timename[i],"on: ",seq_i))
return(getCrimes_Fail %>% mutate(attributes.CCN = url))
}
)
res = rbind(res,restemp)
}
resout = res %>% mutate(YEAR = timeTibble$timename[i])
outList = outList(resout)
}
timeTibble
i=1
print(i)
ids = fromJSON(paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&outFields=*&outSR=4326&f=json&returnIdsOnly=TRUE")) %>% .$objectIds %>% as.character()
id_seq = tibble(
start=seq(from=1,to=ceiling(length(ids)/100)*100,by=100),
end=c(seq(from=100,to=length(ids),by=100),length(ids)))
res = tibble()
seq_i=1
print(paste("Scraping:",timeTibble$timename[i],"- at",seq_i,"of",nrow(id_seq)))
ids_string = str_c(ids[id_seq$start[seq_i]:id_seq$end[seq_i]], collapse = ",")
ids_string
url = paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&objectIds=",ids_string,"&outFields=*&outSR=4326&f=json")
url
restemp = tryCatch(getCrimes(url),
error=function(err){
print(paste0("Failed at: ",timeTibble$timename[i],"on: ",seq_i))
return(getCrimes_Fail %>% mutate(attributes.CCN = url))
}
)
restemp
timeTibble
timeTibble = tibble(timename = c('Last 30 Days',c(2008:2020)),
timenum=c(8,32,33,34,35,11,10,9,27,26,38,0,1,2))
getCrimes = function(url){
json = fromJSON(url, flatten = TRUE)
restemp = json$features %>% as_tibble()
return(restemp)
}
outList = list()
for (i in 1:nrow(timeTibble)){
print(i)
ids = fromJSON(paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&outFields=*&outSR=4326&f=json&returnIdsOnly=TRUE")) %>% .$objectIds %>% as.character()
id_seq = tibble(
start=seq(from=1,to=ceiling(length(ids)/100)*100,by=100),
end=c(seq(from=100,to=length(ids),by=100),length(ids)))
resList = list()
for (seq_i in 1:nrow(id_seq)){
print(paste("Scraping:",timeTibble$timename[i],"- at",seq_i,"of",nrow(id_seq)))
ids_string = str_c(ids[id_seq$start[seq_i]:id_seq$end[seq_i]], collapse = ",")
Sys.sleep(3)
url = paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&objectIds=",ids_string,"&outFields=*&outSR=4326&f=json")
restemp = tryCatch(getCrimes(url) %>% mutate(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i),error=function(err){tibble(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i)})
resList[seq_i]=restemp
}
outList[i] = resList
}
saveRDS(outList,'crimes_outList_20200124.RData')
warnings()
outDF =  lapply(outList,bind_rows)
outList[[1]]
outList[1
]
str(outList)
outDF =  lapply(outList %>% `names<-`c('Last 30 Days',c(2008:2020),bind_rows)
outDF =  lapply(outList %>% `names<-`(c('Last 30 Days',c(2008:2020))),bind_rows)
outList %>% `names<-`(c('Last 30 Days',c(2008:2020)))
i=nrow(timeTibble)
print(i)
ids = fromJSON(paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&outFields=*&outSR=4326&f=json&returnIdsOnly=TRUE")) %>% .$objectIds %>% as.character()
ids
id_seq = tibble(
start=seq(from=1,to=ceiling(length(ids)/1000)*1000,by=1000),
end=c(seq(from=1000,to=length(ids),by=1000),length(ids)))
resList = list()
seq_i=1
print(paste("Scraping:",timeTibble$timename[i],"- at",seq_i,"of",nrow(id_seq)))
ids_string = str_c(ids[id_seq$start[seq_i]:id_seq$end[seq_i]], collapse = ",")
Sys.sleep(3)
url = paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&objectIds=",ids_string,"&outFields=*&outSR=4326&f=json")
restemp = tryCatch(getCrimes(url) %>% mutate(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i),error=function(err){tibble(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i)})
restemp
getCrimes(url)
url = paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&objectIds=",ids_string,"&outFields=*&outSR=4326&f=json")
json = fromJSON(url, flatten = TRUE)
json = fromJSON(url)
url
id_seq = tibble(
start=seq(from=1,to=ceiling(length(ids)/100)*100,by=100),
end=c(seq(from=100,to=length(ids),by=100),length(ids)))
print(paste("Scraping:",timeTibble$timename[i],"- at",seq_i,"of",nrow(id_seq)))
ids_string = str_c(ids[id_seq$start[seq_i]:id_seq$end[seq_i]], collapse = ",")
Sys.sleep(3)
url = paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&objectIds=",ids_string,"&outFields=*&outSR=4326&f=json")
url
restemp = tryCatch(getCrimes(url) %>% mutate(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i),error=function(err){tibble(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i)})
restemp
id_seq = tibble(
start=seq(from=1,to=ceiling(length(ids)/100)*100,by=100),
end=c(seq(from=100,to=length(ids),by=100),length(ids)))
resList = list()
for (seq_i in 1:nrow(id_seq)){
print(paste("Scraping:",timeTibble$timename[i],"- at",seq_i,"of",nrow(id_seq)))
ids_string = str_c(ids[id_seq$start[seq_i]:id_seq$end[seq_i]], collapse = ",")
Sys.sleep(3)
url = paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&objectIds=",ids_string,"&outFields=*&outSR=4326&f=json")
restemp = tryCatch(getCrimes(url) %>% mutate(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i),error=function(err){tibble(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i)})
resList[seq_i]=restemp
}
warnings()
resList %>% bind_rows()
z=resList %>% `names<-`(c(1:nrow(id_seq))) %>% bind_rows()
c(1:nrow(id_seq))
id_seq = tibble(
start=seq(from=1,to=ceiling(length(ids)/100)*100,by=100),
end=c(seq(from=100,to=length(ids),by=100),length(ids)))
resList = list()
for (seq_i in 1:nrow(id_seq)){
print(paste("Scraping:",timeTibble$timename[i],"- at",seq_i,"of",nrow(id_seq)))
ids_string = str_c(ids[id_seq$start[seq_i]:id_seq$end[seq_i]], collapse = ",")
Sys.sleep(3)
url = paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&objectIds=",ids_string,"&outFields=*&outSR=4326&f=json")
restemp = tryCatch(getCrimes(url) %>% mutate(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i),error=function(err){tibble(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i)})
resList[[seq_i]]=restemp
}
z=resList %>% bind_rows()
outList = list()
for (i in 1:nrow(timeTibble)){
print(i)
ids = fromJSON(paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&outFields=*&outSR=4326&f=json&returnIdsOnly=TRUE")) %>% .$objectIds %>% as.character()
id_seq = tibble(
start=seq(from=1,to=ceiling(length(ids)/100)*100,by=100),
end=c(seq(from=100,to=length(ids),by=100),length(ids)))
resList = list()
for (seq_i in 1:nrow(id_seq)){
print(paste("Scraping:",timeTibble$timename[i],"- at",seq_i,"of",nrow(id_seq)))
ids_string = str_c(ids[id_seq$start[seq_i]:id_seq$end[seq_i]], collapse = ",")
Sys.sleep(3)
url = paste0("http://maps2.dcgis.dc.gov/dcgis/rest/services/FEEDS/MPD/MapServer/",timeTibble$timenum[i],"/query?where=1%3D1&objectIds=",ids_string,"&outFields=*&outSR=4326&f=json")
restemp = tryCatch(getCrimes(url) %>% mutate(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i),error=function(err){tibble(timename=timeTibble$timename[i],timenum=timeTibble$timenum[i],seq_i=seq_i)})
resList[[seq_i]]=restemp
}
outList[[i]] = resList %>% bind_rows()
}
saveRDS(outList,paste0(format(Sys.time(),'%Y%m%d %H%M%S'),'crimes_outList_20200124.RData'))
outCrimeDF =  bind_rows(outList) %>%
`colnames<-`(gsub("geometry.","geo_",(gsub("attributes.","",(tolower(colnames(.))))))) %>%
rename(rpt_date = report_dat,neighborhood = neighborhood_cluster) %>%
mutate_at(vars(rpt_date,start_date,end_date),~as.Date(as.POSIXct(./1000, origin="1970-01-01")))
head(outCrimeDF)
write_csv(outCrimeDF,paste(format(Sys.time(),'%Y-%m-%d %H:%M:%S'),'outCrimeDF.csv'))
head(outCrimeDF)
outDF %>% mutate(rpt_year = year(rpt_date)) %>% group_by(rpt_year) %>% summarise(n=n())
outCrimeDF %>% mutate(rpt_year = year(rpt_date)) %>% group_by(rpt_year) %>% summarise(n=n())
write_csv(outCrimeDF %>% mutate(rpt_year = year(rpt_date)) %>% filter(year %in% c(2008:2012)),paste(format(Sys.time(),'%Y-%m-%d %H:%M:%S'),'outCrimeDF 2008-2012.csv'))
write_csv(outCrimeDF %>% mutate(rpt_year = year(rpt_date)) %>% filter(year %in% c(2013:2017)),paste(format(Sys.time(),'%Y-%m-%d %H:%M:%S'),'outCrimeDF 2013-2017.csv'))
write_csv(outCrimeDF %>% mutate(rpt_year = year(rpt_date)) %>% filter(year %in% c(2018:2020)),paste(format(Sys.time(),'%Y-%m-%d %H:%M:%S'),'outCrimeDF 2018-2020.csv'))
write_csv(outCrimeDF %>% mutate(rpt_year = year(rpt_date)) %>% filter(is.na(year)),paste(format(Sys.time(),'%Y-%m-%d %H:%M:%S'),'outCrimeDF Year NA.csv'))
write_csv(outCrimeDF %>% mutate(rpt_year = year(rpt_date)) %>% filter(rpt_year %in% c(2008:2012)),paste(format(Sys.time(),'%Y-%m-%d %H:%M:%S'),'outCrimeDF 2008-2012.csv'))
write_csv(outCrimeDF %>% mutate(rpt_year = year(rpt_date)) %>% filter(rpt_year %in% c(2013:2017)),paste(format(Sys.time(),'%Y-%m-%d %H:%M:%S'),'outCrimeDF 2013-2017.csv'))
write_csv(outCrimeDF %>% mutate(rpt_year = year(rpt_date)) %>% filter(rpt_year %in% c(2018:2020)),paste(format(Sys.time(),'%Y-%m-%d %H:%M:%S'),'outCrimeDF 2018-2020.csv'))
write_csv(outCrimeDF %>% mutate(rpt_year = year(rpt_date)) %>% filter(is.na(rpt_year)),paste(format(Sys.time(),'%Y-%m-%d %H:%M:%S'),'outCrimeDF Year NA.csv'))
